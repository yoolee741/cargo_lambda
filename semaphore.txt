* Semaphore
semaphore는 동시성 제어를 위해 사용하는 기술 중 하나입니다. 
Rust에서 tokio::sync::Semaphore는 비동기 작업 환경에서 사용되는 세마포어로, 동시 실행되는 작업의 수를 제한하는 데 도움을 줍니다. 
이로써 비동기 시스템에서 너무 많은 작업이 동시에 실행되지 않도록 제어할 수 있으며, 특히 외부 API 호출과 같은 리소스 소모가 큰 작업에서 매우 유용합니다.

주요 개념:
세마포어의 기본 원리: 
세마포어는 일종의 "허가증"을 관리하는 기법으로, 특정 개수만큼의 허가증을 발급합니다. 
각 작업은 허가증을 획득한 후 실행할 수 있으며, 허가증이 모두 사용 중일 때는 대기합니다. 
작업이 완료되면 허가증을 반환하여 다른 작업들이 이를 사용할 수 있게 됩니다.

Arc를 통한 공유:
Arc(Atomic Reference Counting)는 다중 스레드에서 데이터를 안전하게 공유할 수 있도록 해주는 스마트 포인터입니다. 
여기서 세마포어는 여러 비동기 작업 사이에서 공유되어야 하므로 Arc로 감싸서 공유합니다.

semaphore.acquire_owned().await: 세마포어에서 하나의 허가증을 획득합니다. 
await 키워드를 사용하므로 비동기적으로 허가증을 기다리게 됩니다. 허가증이 반환되면 작업을 실행할 수 있습니다.

동시성 제어: 
코드에서 tokio::sync::Semaphore::new(10)으로 세마포어를 생성하면서, 최대 10개의 비동기 작업이 동시에 실행되도록 제한하고 있습니다. 
각 작업이 허가증을 획득하지 못하면 대기 상태에 들어가고, 허가증을 획득한 후에야 API 요청을 보낼 수 있습니다. 
작업이 끝나면 허가증을 반환하므로 대기 중이던 다른 작업이 이를 사용할 수 있게 됩니다.

동시성 제어의 필요성:
API 요청을 무제한으로 병렬 처리하면 서버에 부하를 주거나 API의 요청 한도를 초과할 수 있습니다. 
따라서 동시 실행되는 요청 수를 제한하여 서버 부하를 관리하고, 안정적인 응답 시간을 보장할 수 있습니다.

요약:
semaphore는 비동기 작업을 제어하여 API 호출과 같은 외부 요청의 동시 실행 수를 제한하는 역할을 하며, 이를 통해 시스템의 안정성을 높이고 리소스 과부하를 방지합니다.